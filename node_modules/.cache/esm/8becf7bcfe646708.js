let rover_utilities,deployment,cliConfig,util;_fe6‍.x([["resource_type",()=>resource_type],["stackNames",()=>stackNames]]);_fe6‍.w("../utlities/utilities",[["*",null,function(v){rover_utilities=v}]]);_fe6‍.w("../utlities/deployment",[["*",null,function(v){deployment=v}]]);_fe6‍.w("../rover-cli/cliConfig",[["*",null,function(v){cliConfig=v}]]);_fe6‍.w("../rover-cli/util",[["*",null,function(v){util=v}]]);



let input={
    "app_name":"testres3",
    "language":"node",
    "Stacks":{"emailAuth":"EmailAuthApp","emailAuths":"base_app"},
    "CustomStacks":{"customone":["s3_lambda"]},
    "repoconfig": {
        "name":"SAM",
        "repotype":"public",
        "tool":"git",
        "language":"js",
        "framework":"sam",
        "no_envs":1,
        "accesskey":"AKIA57GLKGCHUY3HMT56",
        "secretkey":"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",
        "envs":["dev"],
        "steps":{
            "dev":["build","deploy"]
        },
        "stackname":{
            "dev":"",
        },
        "deploymentbucket":{
            "dev":"",
            
        },
        "deploymentregion":
        {
            "dev":"ap-south-1"
        },
        "deploymentparameters":{ "dev":{}},
        "deployment_event":["push"]
    
    }
}

let res= []
let stack_resource_Name= [];
let template = {};

async function run() {
    
  let editedSam = await util.confirmation();
  if (editedSam !== "yes") {
    let app_name = await util.inputString("app_name");
    let language = await util.languageChoice();
    let no_of_stack = await util.inputNumber("no_of_stack");
    let stack_names = {};
    let customStacks = {};
    for (let i = 1; i <= no_of_stack; i++) {
      let app_Types= [];
      let AppType = await util.inputType("app_Type", "type");
      if (AppType !== "customizable") {
        let stack_name = await util.inputString(`stackName${i}`);

        stack_names[stack_name[`stackName${i}`]] = AppType;
      } else {
        let choice = cliConfig.customizable.choice;
        let customstack_name = await util.inputString(`customStackName${i}`);
        let CustomStacks = await util.multichoice("app_type", choice);
        //name:customstack
        customStacks[customstack_name[`customStackName${i}`]] =
          CustomStacks.app_type;
      }
    }
    template = { ...app_name, language };
    if (stack_names !== null) template = { ...template, Stack: stack_names };
    if (customStacks !== null)
      template = { ...template, CustomStacks: customStacks };

    let r = await util.inputType(
      "choice",
      "pipeline",
      "Do You want to deploy by Pipeline"
    );
    if (r === "yes") {
      let pipeline = await util.samBuild();
      let repoConfig = { ...pipeline };
      template = { ...template, repoConfig };
      let input=util.jsonCreation(template);
      rover_utilities.samGeneration(input)
    } else {
      
      util.jsonCreation(template);
    }
  } else {
    console.log("work in progress...");
  }
}

       let resource_type = ({} = res);
       let stackNames = stack_resource_Name;

run();



    // try{
        
    // //deployment.setupRepo(input.app_name,input.repoconfig)
    // }catch(err){
    //     console.log("ERROR!:",err)
    // }

