"use strict";
exports.__esModule = true;
exports.LambdaLogics = void 0;
exports.LambdaLogics = {
    "nodejs14.x": {
        "EmailAuthModule_PreSignUp": "exports.lambdaHandler = async event => {\n                event.response.autoConfirmUser = false;\n                event.response.autoVerifyEmail = false;\n                return event;\n            };",
        "EmailAuthModule_DefineAuthChallenge": "exports.lambdaHandler = async event => {\n                if (event.request.session &&\n                    event.request.session.length >= 3 &&\n                    event.request.session.slice(-1)[0].challengeResult === false) {\n                    // The user provided a wrong answer 3 times; fail auth\n                    event.response.issueTokens = false;\n                    event.response.failAuthentication = true;\n                } else if (event.request.session &&\n                    event.request.session.length &&\n                    event.request.session.slice(-1)[0].challengeResult === true) {\n                    // The user provided the right answer; succeed auth\n                    event.response.issueTokens = true;\n                    event.response.failAuthentication = false;\n                } else {\n                    // The user did not provide a correct answer yet; present challenge\n                    event.response.issueTokens = false;\n                    event.response.failAuthentication = false;\n                    event.response.challengeName = 'CUSTOM_CHALLENGE';\n                }\n            \n                return event;\n            };\n            ",
        "EmailAuthModule_CreateAuthChallenge": "\n                exports.lambdaHandler = async event => {\n                const connectionString = process.env.DB_CONNECTION_STRING\n                let password;\n                if(!event.request.session || !event.request.session.length) {\n                    // new session, so fetch password from the db\n                    const username = event.request.userAttributes.email;\n                    const user =event.request.userAttributes.username;\n                    const password = event.request.userAttributes.password;\n                } else {\n                    const previousChallenge = event.request.session.slice(-1)[0];\n                    password = previousChallenge.challengeMetadata.match(/PASSWORD-(d*)/)[1];\n                }\n                // This is sent back to the client app\n                event.response.publicChallengeParameters = { username: event.request.userAttributes.email };\n            \n                // Add the secret login code to the private challenge parameters\n                // so it can be verified by the \"Verify Auth Challenge Response\" trigger\n                event.response.privateChallengeParameters = { password };\n            \n                // Add the secret login code to the session so it is available\n                // in a next invocation of the \"Create Auth Challenge\" trigger\n                event.response.challengeMetadata = `PASSWORD-${password}`;    \n                return event;\n            \n            }",
        "EmailAuthModule_VerifyAuthChallengeResponse": "const md5 = require('md5');\n            exports.lambdaHandler = async event => {\n                const expectedAnswer = event.request.privateChallengeParameters.password; \n                if (md5(event.request.challengeAnswer) === expectedAnswer) {\n                    event.response.answerCorrect = true;\n                } else {\n                    event.response.answerCorrect = false;\n                }\n                return event;\n            };",
        "EmailAuthModule_SignUpFunctions": "\n            let response;\n                const aws = require('aws-sdk');\n                const UserPoolID = process.env.UserPoolID\n                const UserPoolClientID = process.env.UserPoolClientID\n                exports.lambdaHandler = async (event, context) => {\n                    try {\n                        if(event.body!==undefined){\n                            event=JSON.parse(event.body)\n                        }\n                        // const ret = await axios(url);\n                        const cognito = new aws.CognitoIdentityServiceProvider();\n                        const params = {\n                            ClientId: UserPoolClientID,\n                            Username:event.emailId,\n                            Password: event.Password,\n                            UserAttributes:[\n                            {\n                    Name: 'email',\n                    Value: event.emailId,\n                    },\n                    {\n                    Name: \"name\",\n                    Value: event.name\n                    }]\n                        };\n                        console.log(params)\n                        let res=await cognito.signUp(params).promise();\n                        response = {\n                            'statusCode': 200,\n                            'body': JSON.stringify(res)\n                        }\n                    } catch (err) {\n                        console.log(err);\n                        response = {\n                        'statusCode': 200,\n                    'body': JSON.stringify(err)\n                        }\n                    }\n\n                    return response\n                };",
        "EmailAuthModule_ResendCode": "\n            let response;\n            const aws = require('aws-sdk');\n            const UserPoolID = process.env.UserPoolID\n            const UserPoolClientID = process.env.UserPoolClientID\n            exports.lambdaHandler = async (event, context) => {\n                try {\n                    if(event.body!==undefined){\n                        event=JSON.parse(event.body)\n                    }\n                    const cognito = new aws.CognitoIdentityServiceProvider();\n                    \n                    var params = {\n                                    ClientId: UserPoolClientID,\n                                    Username: event.emailId\n              }\n              let res=await cognito.resendConfirmationCode(params).promise();\n              \n              \n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify({\n                            message: res,\n                           \n                        })\n                    }\n                } catch (err) {\n                    console.log(err);\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify(err)\n                        }\n                }\n            \n                return response\n            };\n            ",
        "EmailAuthModule_ConfirmUser": "\n            let response;\n            const aws = require('aws-sdk');\n            const dynamoDB = new aws.DynamoDB.DocumentClient();\n            const UserTable = process.env.userinfoTable\n            const UserPoolID = process.env.UserPoolID\n            const UserPoolClientID = process.env.UserPoolClientID\n            async function addUserData(userData) {\n                try {\n                        console.log(\"[INFO] addUserData input\",userData)\n                        const params = {\n                                        TableName: UserTable,\n                                        Item: userData\n            \n                        };\n                        var Items  = await dynamoDB.put(params).promise();\n                        console.log(\"[INFO] addUserData output\",Items)\n                        return Items\n            \n                } \n                catch (err) {\n                        throw err;\n                }\n            }\n            exports.lambdaHandler = async (event, context) => {\n                try {\n                    if(event.body!==undefined){\n                        event=JSON.parse(event.body)\n                    }\n                    const cognito = new aws.CognitoIdentityServiceProvider();\n                    var params = {\n                                    ClientId: UserPoolClientID,\n                                    ConfirmationCode: event.Code,\n                                    Username: event.emailId\n              }\n                   let res=await cognito.confirmSignUp(params).promise();\n                    \n                    var params1 = {\n                                    UserPoolId: UserPoolID,\n                                   AttributesToGet: [\"email\",\"name\",\"sub\"],\n                                   \n              }\n              \n                    \n                    res=await cognito.listUsers(params1).promise();\n                    let user={}\n                    let Attributes={}\n                    res[\"Users\"].map(ele=>{\n                        \n                        Attributes = ele[\"Attributes\"].find(ele=>ele.Name===\"email\"&&ele.Value==event.emailId)\n                        if (Attributes!==undefined) {\n                            ele[\"Attributes\"].map(ele=>{\n                                user[ele.Name]=ele.Value\n                            })\n                        }\n                        \n            \n                    })\n                    console.log(user)\n                    await addUserData(user)\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify({\n                            message: res,\n                           \n                        })\n                    }\n                // await addUserData()\n                } catch (err) {\n                    console.log(err);\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify(err)\n                        }\n                }\n            \n                return response\n            };\n            ",
        "EmailAuthModule_ConfirmForgotPassword": "\n            let response;\n            const UserPoolID = process.env.UserPoolID\n            const UserPoolClientID = process.env.UserPoolClientID\n            const aws = require('aws-sdk');\n            exports.lambdaHandler = async (event, context) => {\n                try {\n                    if(event.body!==undefined){\n                        event=JSON.parse(event.body)\n                    }\n                    const cognito = new aws.CognitoIdentityServiceProvider();\n                    var params = {\n                                    ClientId: UserPoolClientID,\n                                    ConfirmationCode: event.Code,\n                                    Username: event.emailId,\n                                    Password:  event.password, /* required */\n              }\n              let res=await cognito.confirmForgotPassword(params).promise();\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify({\n                            message: res,\n                           \n                        })\n                    }\n                } catch (err) {\n                    console.log(err);\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify(err)\n                        }\n                }\n            \n                return response\n            };\n            ",
        "EmailAuthModule_ForgotPassword": "\n            let response;\n            const UserPoolID = process.env.UserPoolID\n            const UserPoolClientID = process.env.UserPoolClientID\n            const aws = require('aws-sdk');\n            exports.lambdaHandler = async (event, context) => {\n                try {\n                    if(event.body!==undefined){\n                        event=JSON.parse(event.body)\n                    }\n                    const cognito = new aws.CognitoIdentityServiceProvider();\n                    var params = {\n                                    ClientId: UserPoolClientID,\n                                    Username: event.emailId\n                                }\n              let res=await cognito.forgotPassword(params).promise();\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify({\n                            message: res,\n                           \n                        })\n                    }\n                } catch (err) {\n                    console.log(err);\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify(err)\n                        }\n                }\n            \n                return response\n            };\n            ",
        "EmailAuthModule_AuthorizerFunction": "\n            import jwt from 'jsonwebtoken';\n\n            // By default, API Gateway authorizations are cached (TTL) for 300 seconds.\n            // This policy will authorize all requests to the same API Gateway instance where the\n            // request is coming from, thus being efficient and optimising costs.\n            const generatePolicy = (principalId, methodArn) => {\n              const apiGatewayWildcard = methodArn.split('/', 2).join('/') + '/*';\n            \n              return {\n                principalId,\n                policyDocument: {\n                  Version: '2012-10-17',\n                  Statement: [\n                    {\n                      Action: 'execute-api:Invoke',\n                      Effect: 'Allow',\n                      Resource: apiGatewayWildcard,\n                    },\n                  ],\n                },\n              };\n            };\n            \n            export async function handler(event, context) {\n              if (!event.authorizationToken) {\n                throw 'Unauthorized';\n              }\n            \n              const token = event.authorizationToken.replace('Bearer ', '');\n            \n              try {\n                const claims = jwt.verify(token, process.env.AUTH0_PUBLIC_KEY);\n                const policy = generatePolicy(claims.sub, event.methodArn);\n            \n                return {\n                  ...policy,\n                  context: claims\n                };\n              } catch (error) {\n                console.log(error);\n                throw 'Unauthorized';\n              }\n            };",
        "s3_lambda": "exports.lambdaHandler = async event => {\n                if (event.request.session &&\n                    event.request.session.length >= 3 &&\n                    event.request.session.slice(-1)[0].challengeResult === false) {\n                    // The user provided a wrong answer 3 times; fail auth\n                    event.response.issueTokens = false;\n                    event.response.failAuthentication = true;\n                } else if (event.request.session &&\n                    event.request.session.length &&\n                    event.request.session.slice(-1)[0].challengeResult === true) {\n                    // The user provided the right answer; succeed auth\n                    event.response.issueTokens = true;\n                    event.response.failAuthentication = false;\n                } else {\n                    // The user did not provide a correct answer yet; present challenge\n                    event.response.issueTokens = false;\n                    event.response.failAuthentication = false;\n                    event.response.challengeName = 'CUSTOM_CHALLENGE';\n                }\n            \n                return event;\n            };\n            ",
        "EmailAuthModule_Users": "\n            \n            let response;\n            const aws = require('aws-sdk');\n            const dynamoDB = new aws.DynamoDB.DocumentClient();\n            const UserTable = process.env.userinfoTable\n            const UserPoolID = process.env.UserPoolID\n            const UserPoolClientID = process.env.UserPoolClientID\n            async function getUserData(id) {\n                try {\n                    const params = {\n                    TableName: UserTable,\n                    Key: { email: id },\n                    };\n                    var { Item } = await dynamoDB.get(params).promise();\n                    console.log(\"[INFO] getUserData output\",Item)\n                    return Item;\n                } \n                catch (err) {\n                        throw err;\n                }\n            }\n            async function deleteUserData(id) {\n                try {\n                    const params = {\n                    TableName: UserTable,\n                    Key: { email: id },\n                    };\n                    var { Item } = await dynamoDB.delete(params).promise();\n                    console.log(\"[INFO] getUserData output\",Item)\n                    return Item;\n                } \n                catch (err) {\n                        throw err;\n                }\n            }\n            async function addUserData(userData) {\n                try {\n                        console.log(\"[INFO] addUserData input\",userData)\n                        const params = {\n                                        TableName: UserTable,\n                                        Item: userData\n                        };\n                        var Items  = await dynamoDB.put(params).promise();\n                        console.log(\"[INFO] addUserData output\",Items)\n                        return Items\n                } \n                catch (err) {\n                        throw err;\n                }\n            }\n            exports.lambdaHandler = async (event, context) => {\n                try {\n                    let res\n                    console.log(\"events \",event.pathParameters[\"email\"])\n                    if (event.httpMethod==\"GET\"){\n                    res =await getUserData(event.pathParameters[\"email\"])\n                    \n                    }\n                    if (event.httpMethod==\"PUT\"){\n                        if(event.body!==undefined){\n                        event=JSON.parse(event.body)\n                        }\n                        res =await addUserData(event)\n                        res={\"message\":\"data updated\"}\n                    }\n                    if (event.httpMethod==\"DELETE\"){\n                    res =await deleteUserData(event.pathParameters[\"email\"])\n                    res={\"message\":\"data deleted\"}\n                    \n                    }\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify({\n                            data: res,\n                           \n                        })\n                    }\n                } catch (err) {\n                    console.log(err);\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify(err)\n                        }\n                }\n            \n                return response\n            };\n            \n            ",
        "crud": "let response;\n            const aws = require('aws-sdk');\n            const dynamoDB = new aws.DynamoDB.DocumentClient();\n            const Table = process.env.userinfoTable\n            async function getData(id) {\n                try {\n                    const params = {\n                    TableName: Table,\n                    Key: { email: id },\n                    };\n                    var { Item } = await dynamoDB.get(params).promise();\n                    console.log(\"[INFO] getData output\",Item)\n                    return Item;\n                } \n                catch (err) {\n                        throw err;\n                }\n            }\n            async function deleteData(id) {\n                try {\n                    const params = {\n                    TableName: Table,\n                    Key: { email: id },\n                    };\n                    var { Item } = await dynamoDB.delete(params).promise();\n                    console.log(\"[INFO] getData output\",Item)\n                    return Item;\n                } \n                catch (err) {\n                        throw err;\n                }\n            }\n            async function addupdateData(userData) {\n                try {\n                        console.log(\"[INFO] addupdateData input\",userData)\n                        const params = {\n                                        TableName: Table,\n                                        Item: userData\n                        };\n                        var Items  = await dynamoDB.put(params).promise();\n                        console.log(\"[INFO] addupdateData output\",Items)\n                        return Items\n                } \n                catch (err) {\n                        throw err;\n                }\n            }\n            exports.lambdaHandler = async (event, context) => {\n                try {\n                    let res\n                    console.log(\"events \",event.pathParameters[\"email\"])\n                    if (event.httpMethod==\"POST\"){\n                        if(event.body!==undefined){\n                        event=JSON.parse(event.body)\n                        }\n                        res =await addupdateData(event)\n                        res={\"message\":\"data updated\"}\n                    }\n                    if (event.httpMethod==\"GET\"){\n                    res =await getData(event.pathParameters[\"email\"])\n                    \n                    }\n                    if (event.httpMethod==\"PUT\"){\n                        if(event.body!==undefined){\n                        event=JSON.parse(event.body)\n                        }\n                        res =await addupdateData(event)\n                        res={\"message\":\"data updated\"}\n                    }\n                    if (event.httpMethod==\"DELETE\"){\n                    res =await deleteData(event.pathParameters[\"email\"])\n                    res={\"message\":\"data deleted\"}\n                    \n                    }\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify({\n                            data: res,\n                           \n                        })\n                    }\n                } catch (err) {\n                    console.log(err);\n                    response = {\n                        'statusCode': 200,\n                        'body': JSON.stringify(err)\n                        }\n                }\n            \n                return response\n            };",
        "rdstable": "const secret=process.env.Secret\n            const clustername=process.env.Clustername\n            const region=process.env.Region\n            const accountid=process.env.Accountid\n            //const driver = require(\"typeorm-aurora-data-api-driver\")\n            const orm =require(\"typeorm\");\n            exports.lambdaHandler = async (event) => {\n             //const connection = await require('data-api-client')\n             const connection = await orm.createConnection({\n                type: 'aurora-postgres',\n                secretArn: secret,\n                resourceArn: \"arn:aws:rds:\"+region+\":\"+accountid+\":cluster:\"+clustername,\n                database: 'DEVDGB', // default database\n                region:region\n              })\n              \n             \n              //let result = await data.query(`show tables`)\n              //console.log(connection)\n              console.log(await connection.query(\"select * from information_schema.tables\"))\n            };\n            \n            "
    }
};
